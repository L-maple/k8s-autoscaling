// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pv_monitor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PVServiceClient is the client API for PVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PVServiceClient interface {
	RequestPVNames(ctx context.Context, in *PVRequest, opts ...grpc.CallOption) (*PVResponse, error)
	ReplyPVInfos(ctx context.Context, in *PVInfosRequest, opts ...grpc.CallOption) (*PVInfosResponse, error)
}

type pVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPVServiceClient(cc grpc.ClientConnInterface) PVServiceClient {
	return &pVServiceClient{cc}
}

func (c *pVServiceClient) RequestPVNames(ctx context.Context, in *PVRequest, opts ...grpc.CallOption) (*PVResponse, error) {
	out := new(PVResponse)
	err := c.cc.Invoke(ctx, "/pv_monitor.PVService/RequestPVNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVServiceClient) ReplyPVInfos(ctx context.Context, in *PVInfosRequest, opts ...grpc.CallOption) (*PVInfosResponse, error) {
	out := new(PVInfosResponse)
	err := c.cc.Invoke(ctx, "/pv_monitor.PVService/ReplyPVInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PVServiceServer is the server API for PVService service.
// All implementations must embed UnimplementedPVServiceServer
// for forward compatibility
type PVServiceServer interface {
	RequestPVNames(context.Context, *PVRequest) (*PVResponse, error)
	ReplyPVInfos(context.Context, *PVInfosRequest) (*PVInfosResponse, error)
	mustEmbedUnimplementedPVServiceServer()
}

// UnimplementedPVServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPVServiceServer struct {
}

func (UnimplementedPVServiceServer) RequestPVNames(context.Context, *PVRequest) (*PVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPVNames not implemented")
}
func (UnimplementedPVServiceServer) ReplyPVInfos(context.Context, *PVInfosRequest) (*PVInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyPVInfos not implemented")
}
func (UnimplementedPVServiceServer) mustEmbedUnimplementedPVServiceServer() {}

// UnsafePVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PVServiceServer will
// result in compilation errors.
type UnsafePVServiceServer interface {
	mustEmbedUnimplementedPVServiceServer()
}

func RegisterPVServiceServer(s grpc.ServiceRegistrar, srv PVServiceServer) {
	s.RegisterService(&_PVService_serviceDesc, srv)
}

func _PVService_RequestPVNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVServiceServer).RequestPVNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pv_monitor.PVService/RequestPVNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVServiceServer).RequestPVNames(ctx, req.(*PVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVService_ReplyPVInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVServiceServer).ReplyPVInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pv_monitor.PVService/ReplyPVInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVServiceServer).ReplyPVInfos(ctx, req.(*PVInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PVService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pv_monitor.PVService",
	HandlerType: (*PVServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPVNames",
			Handler:    _PVService_RequestPVNames_Handler,
		},
		{
			MethodName: "ReplyPVInfos",
			Handler:    _PVService_ReplyPVInfos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pv_monitor/pv_monitor.proto",
}
